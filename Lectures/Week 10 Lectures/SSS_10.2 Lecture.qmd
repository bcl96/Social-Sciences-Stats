---
title: "Social Sciences Intro to Statistics"
subtitle: "Week 10.2 Multivariate Regression (Continued)"
format: pdf
editor: source
---
Week 10: Learning goal - Test multivariate regression and interpret findings to estimate causal effects. 

 
```{r, echo=FALSE, include=FALSE}
knitr::opts_chunk$set(collapse = TRUE, comment = "#>", highlight = TRUE, warning = FALSE, message = FALSE)
  #comment = "#>" makes it so results from a code chunk start with "#>"; default is "##"
```

# Introduction
Lecture Overview:

- Linear probability model
- Using multiple regression to estimate causal effects
- Conditional independence assumption
- Omitted variable bias

Load packages:
```{r}
library(tidyverse)
library(ggplot2)
library(labelled)
library(patchwork)

# Load ipeds dataset from course website
load(url('https://raw.githubusercontent.com/bcl96/Social-Sciences-Stats/main/data/ipeds/output_data/panel_data.RData'))
```


```{r, echo=FALSE}
# Create ipeds data frame with fewer variables/observations
df_ipeds_pop <- panel_data %>%
  # keep data from fall 2022
  filter(year == 2022) %>%
  # which universities to keep:
    # 2015 carnegie classification: keep research universities (15,16,17) and master's universities (18,19,20)
  filter(c15basic %in% c(15,16,17,18,19,20)) %>%
  # which variables to keep
  select(instnm,unitid,opeid6,opeid,control,c15basic,stabbr,city,zip,locale,obereg, # basic institutional characteristics
         tuition6,fee6,tuition7,fee7, # avg tuition and fees for full-time grad, in-state and out-of-state
         isprof3,ispfee3,osprof3,ospfee3, # avg tuition and fees for MD, in-state and out-of-state
         isprof9,ispfee9,osprof9,ospfee9, # avg tuition and fees for Law, in-state and out-of-state
         chg4ay3,chg7ay3,chg8ay3) %>% # [undergraduate] books+supplies; off-campus (not with family) room and board; off-campus (not with family) other expenses
  # rename variables; syntax <new_name> = <old_name>
  rename(region = obereg, # revion
         tuit_grad_res = tuition6, fee_grad_res = fee6, tuit_grad_nres = tuition7, fee_grad_nres = fee7, # grad
         tuit_md_res = isprof3, fee_md_res = ispfee3, tuit_md_nres = osprof3, fee_md_nres = ospfee3, # md
         tuit_law_res = isprof9, fee_law_res = ispfee9, tuit_law_nres = osprof9, fee_law_nres = ospfee9, # law
         books_supplies = chg4ay3, roomboard_off = chg7ay3, oth_expense_off = chg8ay3) %>% # [undergraduate] expenses
  # create measures of tuition+fees
  mutate(
    tuitfee_grad_res = tuit_grad_res + fee_grad_res, # graduate, state resident
    tuitfee_grad_nres = tuit_grad_nres + fee_grad_nres, # graduate, non-resident
    tuitfee_md_res = tuit_md_res + fee_md_res, # MD, state resident
    tuitfee_md_nres = tuit_md_nres + fee_md_nres, # MD, non-resident
    tuitfee_law_res = tuit_law_res + fee_law_res, # Law, state resident
    tuitfee_law_nres = tuit_law_nres + fee_law_nres) %>% # Law, non-resident  
  # create measures of cost-of-attendance (COA) as the sum of tuition, fees, book, living expenses
  mutate(
    coa_grad_res = tuit_grad_res + fee_grad_res + books_supplies + roomboard_off + oth_expense_off, # graduate, state resident
    coa_grad_nres = tuit_grad_nres + fee_grad_nres + books_supplies + roomboard_off + oth_expense_off, # graduate, non-resident
    coa_md_res = tuit_md_res + fee_md_res + books_supplies + roomboard_off + oth_expense_off, # MD, state resident
    coa_md_nres = tuit_md_nres + fee_md_nres + books_supplies + roomboard_off + oth_expense_off, # MD, non-resident
    coa_law_res = tuit_law_res + fee_law_res + books_supplies + roomboard_off + oth_expense_off, # Law, state resident
    coa_law_nres = tuit_law_nres + fee_law_nres + books_supplies + roomboard_off + oth_expense_off) %>% # Law, non-resident    
  # keep only observations that have non-missing values for the variable coa_grad_res
    # this does cause us to lose some interesting universities, but doing this will eliminate some needless complications with respect to learning core concepts about statistical inference
  filter(!is.na(coa_grad_res))

# Add variable labels to the tuit+fees variables and coa variables
  # tuition + fees variables
    var_label(df_ipeds_pop[['tuitfee_grad_res']]) <- 'graduate, full-time, resident; avg tuition + required fees'
    var_label(df_ipeds_pop[['tuitfee_grad_nres']]) <- 'graduate, full-time, non-resident; avg tuition + required fees'
    var_label(df_ipeds_pop[['tuitfee_md_res']]) <- 'MD, full-time, state resident; avg tuition + required fees'
    var_label(df_ipeds_pop[['tuitfee_md_nres']]) <- 'MD, full-time, non-resident; avg tuition + required fees'
    var_label(df_ipeds_pop[['tuitfee_law_res']]) <- 'Law, full-time, state resident; avg tuition + required fees'
    var_label(df_ipeds_pop[['tuitfee_law_nres']]) <- 'Law, full-time, non-resident; avg tuition + required fees'
    
  # COA variables
    var_label(df_ipeds_pop[['coa_grad_res']]) <- 'graduate, full-time, state resident COA; == tuition + fees + (ug) books/supplies + (ug) off-campus room and board + (ug) off-campus other expenses'
    var_label(df_ipeds_pop[['coa_grad_nres']]) <- 'graduate, full-time, non-resident COA; == tuition + fees + (ug) books/supplies + (ug) off-campus room and board + (ug) off-campus other expenses'
    var_label(df_ipeds_pop[['coa_md_res']]) <- 'MD, full-time, state resident COA; == tuition + fees + (ug) books/supplies + (ug) off-campus room and board + (ug) off-campus other expenses'
    var_label(df_ipeds_pop[['coa_md_nres']]) <- 'MD, full-time, non-resident COA; == tuition + fees + (ug) books/supplies + (ug) off-campus room and board + (ug) off-campus other expenses'
    var_label(df_ipeds_pop[['coa_law_res']]) <- 'Law, full-time, state resident COA; == tuition + fees + (ug) books/supplies + (ug) off-campus room and board + (ug) off-campus other expenses'
    var_label(df_ipeds_pop[['coa_law_nres']]) <- 'Law, full-time, non-resident COA; == tuition + fees + (ug) books/supplies + (ug) off-campus room and board + (ug) off-campus other expenses'

df_ipeds_pop %>% glimpse()


##########
########## Create data frame of generated variables, with each variable meant to represent the entire population
##########


num_obs <- 10000

# Generate normal distribution w/ custom mean and sd
set.seed(124)
norm_dist <- rnorm(n = num_obs, mean = 50, sd = 5)

# Generate right-skewed distribution
set.seed(124)
rskew_dist <- rbeta(n = num_obs, shape1 = 2, shape2 = 5)

# Generate left-skewed distribution
set.seed(124)
lskew_dist <- rbeta(n = num_obs, shape1 = 5, shape2 = 2)

# Generate standard normal distribution (default is mean = 0 and sd = 1)
set.seed(124)
stdnorm_dist <- rnorm(n = num_obs, mean = 0, sd = 1)  # equivalent to rnorm(10)

# Create dataframe
df_generated_pop <- data.frame(norm_dist, rskew_dist, lskew_dist, stdnorm_dist)

# drop individual objects associated with each variable
rm(norm_dist,rskew_dist,lskew_dist,stdnorm_dist)
rm(num_obs)


##########
########## Create sample versions of generated population data frame and IPEDS population data frame
##########

# create sample version of our generated data
  set.seed(124) # set seed so that everyone ends up with the same random sample
  
  df_generated_sample <- df_generated_pop %>% sample_n(size = 200)
  df_generated_sample %>% glimpse()


# create sample version of our ipeds data

  set.seed(124) # set seed so that everyone ends up with the same random sample
  
  df_ipeds_sample <- df_ipeds_pop %>% sample_n(size = 200) 
  
  # compare mean of coa_grad_res between population and sample
  mean(df_ipeds_pop$coa_grad_res, na.rm = TRUE)
  mean(df_ipeds_sample$coa_grad_res, na.rm = TRUE)

##########
########## STAR DATA
##########

# load star data
load(url("https://raw.githubusercontent.com/bcl96/Social-Sciences-Stats/main/data/star/star_panel_data.RData"))

#df_star_panel %>% glimpse()

# create data frame for STAR experiment, keeping only kindergarten
df_stark <- df_star_panel %>% 
  # keep only kindergarten year
  filter(grade ==1) %>% 
  # keep only observations with non-missing value for reading score
  filter(!is.na(read)) %>%
  # keep only observations with non-missing values for treatment assignment
  filter(!is.na(star)) %>%
  # drop observations where treatment status is regular+aide
  filter(star !=3) %>%
  # keep selected variables
  select(id,grade,star,read,gender,ethnicity,lunch,school,degree,experience) %>%
  # create a variable "treatment" that equals 1 if student receives treatment (small class) and equals 0 otherwise
  mutate(
    treatment = if_else(star==2,1,0)
  )


df_stark %>% glimpse()

```


### The Linear Probability Model 

The linear probability model helps us make predictions with binary outcome variables. It models the probability of a binary outcome as a linear function of explanatory variables.

For example, we can try to predict whether a student passed based on study hours.

```{r}
# Example Data: Study hours and pass (1 = passed, 0 = failed)
study_data <- data.frame(
  study_hours = c(2, 4, 6, 8, 10, 12),
  pass = c(0, 0, 1, 1, 1, 1)
)

# Fitting the Linear Probability Model
lpm <- lm(pass ~ study_hours, data = study_data)

# Summary of the model
summary(lpm)

```

### Multiple Regression to Estimate Causal Effects
Multiple regression can help isolate the effect of one variable on an outcome while controlling for other variables.

For example, we can use it to estimate the effect of hours studied and school quality on test scores.

```{r}

study_data1 <- data.frame(
  study_hours = c(2, 4, 6, 8, 10, 12),
  school_quality = c(5, 4, 3, 2, 4, 5),
  test_score = c(60, 65, 70, 75, 80, 85)
)

# Multiple regression model
model <- lm(test_score ~ study_hours + school_quality, data = study_data1)

# Summary of the model
summary(model)

```

## Omitted Variable Bias

Population linear regression model

- $Y_i = \beta_0 + \beta_1 X_{1i}+ u_i$, where:
- $Y_i$: is earnings for student $i$ in 2011
- $X_{1i}$: is whether student $i$ had an internship in the 2005-06 academic year
  - $X_{1i}=0$: student $i$ did not have an internship ("untreated" or "control")
  - $X_{1i}=1$: student $i$ had an internship ("treated")
- $u_i$ is all variables that affect $Y_i$ but were not included in our model


We want to estimate $\beta_1$, the "true" *causal effect* of X on Y


- Bias (general): when $\hat{\beta_1}$ consistently underestimates $\beta_1$ or overestimates $\beta_1$


### Omitted Variable Bias: 
Bias in $\hat{\beta_1}$ due to variables being omitted from the model. Omitted variable bias arises when a relevant variable is left out of a regression model, leading to biased estimates.

## For omitted variable bias to occur, the omitted variable “Z” must satisfy two conditions:

- (1) Z affects value of Y (i.e. Z is part of $u_i$)
- (2) *and* Z has a relationship with $X$

## Omitted variable bias is caused by violations of the conditional expectations assumption (CIA):

- Recall the conditional independence assumption
  - in words: the independent variable $X_{1i}$ is unrelated to omitted variables, $u_i$, not included in the model
- Omitted variable bias is caused by omitting a variable from your model that is related (e.g., correlated) to $X_i$ (and that also affects $Y_i$)

## Omitted variable bias is not a concern in a random assignment experiment:

- If values of your independent variable of interest $X_{1i}$ are randomly asssigned, then the value of $X$ cannot have a systematic relationship with other variables that affect $Y$ that have been omitted from your model


Let's consider Tenessee STAR experiment, where we are interested in the effect of class size ($X$) on reading achievement score ($Y_i$)

- values of class size are randomly assigned: small class size ($X_{1i}=1$) vs. regular class size ($X_{1i}=0$)
- below shows a regression of `treatment` ($X$) and `read` ($Y$)

```{r}
summary(lm(formula = read ~ as.factor(treatment), data = df_stark))
```
- The variable `lunch` (free-reduced lunch), a proxy for household income, also affects reading achievement

```{r}
summary(lm(formula = read ~ as.factor(lunch), data = df_stark))
```
- But we are not concerned about omitted variable bias due to excluding `lunch` from our model, because values of the class size treatment were randomly assigned

```{r}
# model without controlling for lunch
summary(lm(formula = read ~ as.factor(treatment), data = df_stark))


# model with controlling for lunch
summary(lm(formula = read ~ as.factor(treatment) + as.factor(lunch), data = df_stark))
```











