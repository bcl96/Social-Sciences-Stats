---
title: "Social Sciences Intro to Statistics"
subtitle: "Week 9.2 Confidence Intervals and Assumptions"
format: pdf
editor: source
---
Week 9: Learning goal - Acquire understanding of beta hat with categorical variables, confidence intervals, and assumptions. 

 
```{r, echo=FALSE, include=FALSE}
knitr::opts_chunk$set(collapse = TRUE, comment = "#>", highlight = TRUE, warning = FALSE, message = FALSE)
  #comment = "#>" makes it so results from a code chunk start with "#>"; default is "##"
```

# Introduction
Lecture overview:

-Confidence Intervals
		-Calculating confidence intervals
- OLS assumptions
	-Bias and efficiency
	-OLS (Ordinary Least Squares) Assumptions

Load packages:
```{r}
library(tidyverse)
library(ggplot2)
library(labelled)
library(patchwork)

# Load ipeds dataset from course website
load(url('https://raw.githubusercontent.com/bcl96/Social-Sciences-Stats/main/data/ipeds/output_data/panel_data.RData'))
```


```{r, echo=FALSE}
# Create ipeds data frame with fewer variables/observations
df_ipeds_pop <- panel_data %>%
  # keep data from fall 2022
  filter(year == 2022) %>%
  # which universities to keep:
    # 2015 carnegie classification: keep research universities (15,16,17) and master's universities (18,19,20)
  filter(c15basic %in% c(15,16,17,18,19,20)) %>%
  # which variables to keep
  select(instnm,unitid,opeid6,opeid,control,c15basic,stabbr,city,zip,locale,obereg, # basic institutional characteristics
         tuition6,fee6,tuition7,fee7, # avg tuition and fees for full-time grad, in-state and out-of-state
         isprof3,ispfee3,osprof3,ospfee3, # avg tuition and fees for MD, in-state and out-of-state
         isprof9,ispfee9,osprof9,ospfee9, # avg tuition and fees for Law, in-state and out-of-state
         chg4ay3,chg7ay3,chg8ay3) %>% # [undergraduate] books+supplies; off-campus (not with family) room and board; off-campus (not with family) other expenses
  # rename variables; syntax <new_name> = <old_name>
  rename(region = obereg, # revion
         tuit_grad_res = tuition6, fee_grad_res = fee6, tuit_grad_nres = tuition7, fee_grad_nres = fee7, # grad
         tuit_md_res = isprof3, fee_md_res = ispfee3, tuit_md_nres = osprof3, fee_md_nres = ospfee3, # md
         tuit_law_res = isprof9, fee_law_res = ispfee9, tuit_law_nres = osprof9, fee_law_nres = ospfee9, # law
         books_supplies = chg4ay3, roomboard_off = chg7ay3, oth_expense_off = chg8ay3) %>% # [undergraduate] expenses
  # create measures of tuition+fees
  mutate(
    tuitfee_grad_res = tuit_grad_res + fee_grad_res, # graduate, state resident
    tuitfee_grad_nres = tuit_grad_nres + fee_grad_nres, # graduate, non-resident
    tuitfee_md_res = tuit_md_res + fee_md_res, # MD, state resident
    tuitfee_md_nres = tuit_md_nres + fee_md_nres, # MD, non-resident
    tuitfee_law_res = tuit_law_res + fee_law_res, # Law, state resident
    tuitfee_law_nres = tuit_law_nres + fee_law_nres) %>% # Law, non-resident  
  # create measures of cost-of-attendance (COA) as the sum of tuition, fees, book, living expenses
  mutate(
    coa_grad_res = tuit_grad_res + fee_grad_res + books_supplies + roomboard_off + oth_expense_off, # graduate, state resident
    coa_grad_nres = tuit_grad_nres + fee_grad_nres + books_supplies + roomboard_off + oth_expense_off, # graduate, non-resident
    coa_md_res = tuit_md_res + fee_md_res + books_supplies + roomboard_off + oth_expense_off, # MD, state resident
    coa_md_nres = tuit_md_nres + fee_md_nres + books_supplies + roomboard_off + oth_expense_off, # MD, non-resident
    coa_law_res = tuit_law_res + fee_law_res + books_supplies + roomboard_off + oth_expense_off, # Law, state resident
    coa_law_nres = tuit_law_nres + fee_law_nres + books_supplies + roomboard_off + oth_expense_off) %>% # Law, non-resident    
  # keep only observations that have non-missing values for the variable coa_grad_res
    # this does cause us to lose some interesting universities, but doing this will eliminate some needless complications with respect to learning core concepts about statistical inference
  filter(!is.na(coa_grad_res))

# Add variable labels to the tuit+fees variables and coa variables
  # tuition + fees variables
    var_label(df_ipeds_pop[['tuitfee_grad_res']]) <- 'graduate, full-time, resident; avg tuition + required fees'
    var_label(df_ipeds_pop[['tuitfee_grad_nres']]) <- 'graduate, full-time, non-resident; avg tuition + required fees'
    var_label(df_ipeds_pop[['tuitfee_md_res']]) <- 'MD, full-time, state resident; avg tuition + required fees'
    var_label(df_ipeds_pop[['tuitfee_md_nres']]) <- 'MD, full-time, non-resident; avg tuition + required fees'
    var_label(df_ipeds_pop[['tuitfee_law_res']]) <- 'Law, full-time, state resident; avg tuition + required fees'
    var_label(df_ipeds_pop[['tuitfee_law_nres']]) <- 'Law, full-time, non-resident; avg tuition + required fees'
    
  # COA variables
    var_label(df_ipeds_pop[['coa_grad_res']]) <- 'graduate, full-time, state resident COA; == tuition + fees + (ug) books/supplies + (ug) off-campus room and board + (ug) off-campus other expenses'
    var_label(df_ipeds_pop[['coa_grad_nres']]) <- 'graduate, full-time, non-resident COA; == tuition + fees + (ug) books/supplies + (ug) off-campus room and board + (ug) off-campus other expenses'
    var_label(df_ipeds_pop[['coa_md_res']]) <- 'MD, full-time, state resident COA; == tuition + fees + (ug) books/supplies + (ug) off-campus room and board + (ug) off-campus other expenses'
    var_label(df_ipeds_pop[['coa_md_nres']]) <- 'MD, full-time, non-resident COA; == tuition + fees + (ug) books/supplies + (ug) off-campus room and board + (ug) off-campus other expenses'
    var_label(df_ipeds_pop[['coa_law_res']]) <- 'Law, full-time, state resident COA; == tuition + fees + (ug) books/supplies + (ug) off-campus room and board + (ug) off-campus other expenses'
    var_label(df_ipeds_pop[['coa_law_nres']]) <- 'Law, full-time, non-resident COA; == tuition + fees + (ug) books/supplies + (ug) off-campus room and board + (ug) off-campus other expenses'

df_ipeds_pop %>% glimpse()


##########
########## Create data frame of generated variables, with each variable meant to represent the entire population
##########


num_obs <- 10000

# Generate normal distribution w/ custom mean and sd
set.seed(124)
norm_dist <- rnorm(n = num_obs, mean = 50, sd = 5)

# Generate right-skewed distribution
set.seed(124)
rskew_dist <- rbeta(n = num_obs, shape1 = 2, shape2 = 5)

# Generate left-skewed distribution
set.seed(124)
lskew_dist <- rbeta(n = num_obs, shape1 = 5, shape2 = 2)

# Generate standard normal distribution (default is mean = 0 and sd = 1)
set.seed(124)
stdnorm_dist <- rnorm(n = num_obs, mean = 0, sd = 1)  # equivalent to rnorm(10)

# Create dataframe
df_generated_pop <- data.frame(norm_dist, rskew_dist, lskew_dist, stdnorm_dist)

# drop individual objects associated with each variable
rm(norm_dist,rskew_dist,lskew_dist,stdnorm_dist)
rm(num_obs)


##########
########## Create sample versions of generated population data frame and IPEDS population data frame
##########

# create sample version of our generated data
  set.seed(124) # set seed so that everyone ends up with the same random sample
  
  df_generated_sample <- df_generated_pop %>% sample_n(size = 200)
  df_generated_sample %>% glimpse()


# create sample version of our ipeds data

  set.seed(124) # set seed so that everyone ends up with the same random sample
  
  df_ipeds_sample <- df_ipeds_pop %>% sample_n(size = 200) 
  
  # compare mean of coa_grad_res between population and sample
  mean(df_ipeds_pop$coa_grad_res, na.rm = TRUE)
  mean(df_ipeds_sample$coa_grad_res, na.rm = TRUE)

##########
########## STAR DATA
##########

# load star data
load(url("https://raw.githubusercontent.com/bcl96/Social-Sciences-Stats/main/data/star/star_panel_data.RData"))

#df_star_panel %>% glimpse()

# create data frame for STAR experiment, keeping only kindergarten
df_stark <- df_star_panel %>% 
  # keep only kindergarten year
  filter(grade ==1) %>% 
  # keep only observations with non-missing value for reading score
  filter(!is.na(read)) %>%
  # keep only observations with non-missing values for treatment assignment
  filter(!is.na(star)) %>%
  # drop observations where treatment status is regular+aide
  filter(star !=3) %>%
  # keep selected variables
  select(id,grade,star,read,gender,ethnicity,lunch,school,degree,experience) %>%
  # create a variable "treatment" that equals 1 if student receives treatment (small class) and equals 0 otherwise
  mutate(
    treatment = if_else(star==2,1,0)
  )


df_stark %>% glimpse()
```


## Confidence intervals

Recall that the fundamental goal of inferential statistics is to make statements about population parameters

- we take a (random) sample from the population
- Using sample data, we calculate point estimates
- these point estimates are our best guess of the value of population parameters

So far, we have focused on using point estimates to test hypotheses about the value of a population parameter

Instead of testing hypotheses about whether a population paremter equals a *specific value*, we can use point estimates to make a statement about some *interval* within which we believe the population parameter lies


[Confidence interval](https://www.simplypsychology.org/confidence-interval.html)

A confidence interval (CI) is a range of values thatâ€™s likely to include a population value with a certain degree of confidence

- For example (hypothetical), "we are 95% sure that President Biden's approval rating among adults in the US lies somewhere between 45% and 49%"
  - in this statement, "President Biden's approval rating" is a population parameter based all adults in the US
  - we don't know the population parameter unless we have data on the entire population
  - we take a sample of adults from the US population; calculate sample mean approval rating, and this point estimate is the basis for the confidence interval we calculate
  
## Calculating confidence intervals

Re-introduce some previous concepts

- Recall the z-score, $z_i$, of an observation $i$ is the number of standard deviations away from the mean
- Recall the "empirical rule" for any approximately normal distribution
  - About 68% of obs fall within one std. dev of mean  
    - i.e., between $x - z$ and $x + z$
  - About 95% of obs fall within two std. dev of mean  
    - i.e., between $x - 2z$ and $x + 2z$
  - About 99% of obs fall within three std. dev of mean  
    - i.e., between $x - 3z$ and $x + 3z$

### General formula for confidence intervals

- $\text{point estimate} \pm z*SE(\text{point estimate})$, where:
  - $SE(\text{point estimate})$: the sample standard error associated with the point estimate 
  - $z=$: z-score associated with desired confidence interval

Confidence Interval | Z-Score
-------|-------
90% |  1.645
95% | 1.96
99% | 2.576

### Formula for confidence interval about $\mu_Y$

- $\bar{Y} \pm z*SE(\bar{Y})$
- Formulas for 95% confidence interval:
  - $\bar{Y} \pm 1.96*SE(\bar{Y})$
- general interpretation of 95% confidence interval:
  - We are 95% confident that the population mean $\mu_Y$ lies somewhere between [lower bound] and [upper bound]
  

### Formula for confidence interval about $\beta_k$

- $\hat{\beta}_k \pm z*SE(\hat{\beta}_k)$
- Formulas for 95% confidence interval:
  - $\hat{\beta}_k \pm 1.96*SE(\hat{\beta}_k)$
- general interpretation of 95% confidence interval:
  - We are 95% confident that the population parameter $\beta_k$ lies somewhere between [lower bound] and [upper bound]


## Calculating confidence interval about $\beta_k$ in *R*

### Present research question and models

- Research question (posed in a correlational way)
  - What is the relationship between institutional control ($X$) and in-state tuition ($Y$) for full-time graduates? We will be using the data frame `df_ipeds_filtered` 
  
- Population Linear Regression Model
  - $Y_i = \beta_0 + \beta_1X_i + u_i$
  - where:
  
    - $Y_i$: in-state tuition (in dollars) at university $i$ (measured by variable `tuit_grad_res`)
    - $X_i$: is institutional control, measured by the factor variable `control`, where:
      - underlying value `1` is associated with "public"
      - underlying value `2` is associated with "private"
      - **note**: R will automatically assign the lowest value of X as your "reference" category!
        - "public" universities are the "reference category"
        - "private" universities are the "non-reference category"
    - $\beta_1$: population regression coefficient associated with being the non-reference category as opposed to the reference category
    - $\beta_0$: population intercept; average value of $Y$ when $X=0$ 
      - this is the average value of $Y$ when $X$ is the reference group category
- OLS Prediction Line (without estimates)
   - $\hat{Y_i} = \hat{\beta_0} + \hat{\beta_1}X_i$
- OLS Prediction Line (with estimates)   
   - $\hat{Y_i} =$  `r format(round(summary(tuitmod1)$coefficients[1,1], digits =2),big.mark = ',')` + `r round(summary(tuitmod1)$coefficients[2,1], digits =2)` $\times X_i$

Run regression in *R*
```{r}
df_ipeds_filtered <- df_ipeds_pop %>% filter(control %in% c(1, 2))

tuitmod1 <- lm(formula = tuit_grad_res ~ control, data = df_ipeds_filtered)

summary(tuitmod1)
```

Calculate 95% CI using $\hat{\beta_1}$ and SE($\hat{\beta_1}$)

- Formula: $\hat{\beta}_k \pm 1.96*SE(\hat{\beta}_k)$
  - $\hat{\beta_1}=$ `r round(summary(tuitmod1)$coefficients[2,1], digits =4)`
  - $SE(\hat{\beta_1})=$ `r round(summary(tuitmod1)$coefficients[2,2], digits =4)`
  - lower bound: = $\hat{\beta}_k - 1.96*SE(\hat{\beta}_k)=$  `r round(summary(tuitmod1)$coefficients[2,1]-1.96*summary(tuitmod1)$coefficients[2,2], digits =2)`
  - upper bound: = $\hat{\beta}_k + 1.96*SE(\hat{\beta}_k)=$ `r round(summary(tuitmod1)$coefficients[2,1]+1.96*summary(tuitmod1)$coefficients[2,2], digits =2)`
- Interpretation:
  - We are 95% confident that the population parameter $\beta_1$ lies somewhere between `r round(summary(tuitmod1)$coefficients[2,1]-1.96*summary(tuitmod1)$coefficients[2,2], digits =2)` and `r round(summary(tuitmod1)$coefficients[2,1]+1.96*summary(tuitmod1)$coefficients[2,2], digits =2)`

Calculate 99% CI using $\hat{\beta_1}$ and SE($\hat{\beta_1}$)

- Formula: $\hat{\beta}_k \pm 2.576*SE(\hat{\beta}_k)$
  - $\hat{\beta_1}=$ `r round(summary(tuitmod1)$coefficients[2,1], digits =4)`
  - $SE(\hat{\beta_1})=$ `r round(summary(tuitmod1)$coefficients[2,2], digits =4)`
  - lower bound: = $\hat{\beta}_k - 2.576*SE(\hat{\beta}_k)=$  `r round(summary(tuitmod1)$coefficients[2,1]-2.576*summary(tuitmod1)$coefficients[2,2], digits =2)`
  - upper bound: = $\hat{\beta}_k + 2.576*SE(\hat{\beta}_k)=$ `r round(summary(tuitmod1)$coefficients[2,1]+2.576*summary(tuitmod1)$coefficients[2,2], digits =2)`
- Interpretation:
  - We are 99% confident that the population parameter $\beta_1$ lies somewhere between `r round(summary(tuitmod1)$coefficients[2,1]-2.576*summary(tuitmod1)$coefficients[2,2], digits =2)` and `r round(summary(tuitmod1)$coefficients[2,1]+2.576*summary(tuitmod1)$coefficients[2,2], digits =2)`
  
Calculating confidence intervals in *R* using `confint()` function

```{r}
#?confint # to get help file for the functon

# 95 percent confidence interval
confint(tuitmod1, level = 0.95)

# 99 percent confidence interval
confint(tuitmod1, level = 0.99)
```













